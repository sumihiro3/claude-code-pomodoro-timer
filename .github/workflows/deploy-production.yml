# GitHub Actions - 本番環境デプロイワークフロー
# mainブランチへのプッシュ時にCloudflare Workers本番環境にデプロイ

name: Deploy to Production Environment

# ワークフロー実行トリガー
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 環境変数設定
env:
  NODE_VERSION: '20'
  YARN_CACHE_FOLDER: ~/.cache/yarn

# ジョブ定義
jobs:
  # テスト実行ジョブ
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      # リポジトリチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Node.js環境セットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      # 依存関係インストール
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      # TypeScript型チェック実行
      - name: Run TypeScript type check
        run: yarn typecheck
      
      # ESLintチェック実行
      - name: Run ESLint
        run: yarn lint
      
      # ユニットテスト実行
      - name: Run unit tests
        run: yarn test --run
      
      # E2Eテスト実行（現在未実装のためコメントアウト）
      # - name: Install Playwright browsers
      #   run: npx playwright install --with-deps
      # 
      # - name: Run E2E tests
      #   run: yarn test:e2e

  # デプロイジョブ（テスト成功時のみ実行）
  deploy:
    name: Deploy to Cloudflare Workers (Production)
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      # リポジトリチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Node.js環境セットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      # 依存関係インストール
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      # プロダクションビルド実行
      - name: Build application
        run: yarn build
      
      # Cloudflare Workersデプロイ
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production
      
      # デプロイ結果通知
      - name: Notify deployment success
        if: success()
        run: echo "✅ Production environment deployment successful!"
      
      - name: Notify deployment failure
        if: failure()
        run: echo "❌ Production environment deployment failed!"